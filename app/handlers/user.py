from aiogram import Bot, Router, types, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession
from aiogram.fsm.context import FSMContext

from app.db.requests import create_ticket, get_last_ticket, get_ticket, get_tickets_by_id, update_ticket
from app.keyboards import inline, reply
from common.texts import admin_contact
from common.texts.group import group_id

user = Router()

list_images = []
list_documents = []


############################################### /start #####################################################################################
@user.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(f"–ü—Ä–∏–≤–µ—Ç!üëã\n\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–¥–∞—á–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–°–ö –£–†–ê–õ¬ªüë®üèª‚Äçüíº\n\n\
–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µüëá", reply_markup= await inline.user_menu())
    
@user.message(CommandStart())
async def start_cmd(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç!üëã\n\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–¥–∞—á–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–°–ö –£–†–ê–õ¬ªüë®üèª‚Äçüíº\n\n\
–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å - –í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–∏–∂–µüëá", reply_markup= await inline.user_menu())
    
    
@user.message(Command("help"))
async def help_cmd(message: types.Message):
    await message.answer(f"ü§ñ –ë–æ—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ —Å–æ–∑–¥–∞–Ω –∏ –≤–Ω–µ–¥—Ä–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –æ—Ç–¥–µ–ª–æ–º –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–°–ö –£–†–ê–õ¬ª\n\n\
üë®üèª‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫/–¢–ü: {admin_contact.text}", reply_markup= await inline.back_to_menu_from_help())
    
@user.callback_query(F.data==("support"))
async def help_cmd(callback: types.CallbackQuery):
    await callback.answer()
    await callback.message.answer(f"ü§ñ –ë–æ—Ç-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—è–≤–æ–∫ —Å–æ–∑–¥–∞–Ω –∏ –≤–Ω–µ–¥—Ä–µ–Ω —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –æ—Ç–¥–µ–ª–æ–º –∫–æ–º–ø–∞–Ω–∏–∏ ¬´–°–ö –£–†–ê–õ¬ª\n\n\
üë®üèª‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫/–¢–ü: {admin_contact.text}", reply_markup= await inline.back_to_menu_from_help())

############################################################################################################################################   
   
    
########## FSM-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏ #####################################################################################################

class AddTicket(StatesGroup):
    user_id = State()
    region = State()
    category = State()
    series = State()
    product = State()
    additionally = State()
    images = State()
    documents = State()

    ticket_for_change = None
 
@user.callback_query(StateFilter(None), F.data.startswith("t-change_"))
async def change_ticket_callback(
    callback: types.CallbackQuery, state: FSMContext, session: AsyncSession
):
    ticket_id = callback.data.split("_")[-1]

    ticket_for_change = await get_ticket(int(ticket_id))

    AddTicket.ticket_for_change = ticket_for_change

    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", 
                                  reply_markup=await reply.region())
    await state.set_state(AddTicket.region)  
   
    
@user.callback_query(F.data == "new_ticket")
async def new_ticket(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer("–ú–µ–Ω—é –∑–∞—è–≤–æ–∫")
    await callback.message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∑–∞—è–≤–æ–∫.", reply_markup=reply.new_ticket)
    await state.set_state(AddTicket.user_id)
    
    
# –•–µ–Ω–¥–ª–µ—Ä –æ—Ç–º–µ–Ω—ã –∏ —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ–≥–¥–∞ –∏–º–µ–Ω–Ω–æ –∑–¥–µ—Å—å,
# –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –≤—Å—Ç–∞–ª–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–º–µ—Ä 1 (—ç–ª–µ–º–µ–Ω—Ç–∞—Ä–Ω–∞—è –æ—á–µ—Ä–µ–¥–Ω–æ—Å—Ç—å —Ñ–∏–ª—å—Ç—Ä–æ–≤)
@user.message(StateFilter("*"), Command("–æ—Ç–º–µ–Ω–∞"))
@user.message(StateFilter("*"), F.text.casefold() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: types.Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    if current_state is None:
        return
    if AddTicket.ticket_for_change:
        AddTicket.ticket_for_change = None
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã", reply_markup=await inline.back_to_menu())
    
@user.message(AddTicket.user_id, F.text)
async def add_ticket_user_id(message: types.Message, state: FSMContext):
    await state.update_data(status="–ù–æ–≤–∞—è")
    await state.update_data(user_id=int(message.from_user.id))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω", reply_markup=await reply.region())
    await state.set_state(AddTicket.region)
    
    
@user.message(AddTicket.region, F.text)  
async def add_ticket_region(message: types.Message, state: FSMContext):
    if message.text == "." and AddTicket.ticket_for_change:
        await state.update_data(region=AddTicket.ticket_for_change.region)
    else:
        await state.update_data(region=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", reply_markup=await reply.categories())
    await state.set_state(AddTicket.category)
    
@user.message(AddTicket.category, F.text)
async def add_ticket_category(message: types.Message, state: FSMContext):
    if message.text == "." and AddTicket.ticket_for_change:
        await state.update_data(category=AddTicket.ticket_for_change.category)
    else:
        await state.update_data(category=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–∏—é", reply_markup=await reply.series(message.text))
    await state.set_state(AddTicket.series)
    
@user.message(AddTicket.series, F.text)
async def add_ticket_series(message: types.Message, state: FSMContext):
    if message.text == "." and AddTicket.ticket_for_change:
        await state.update_data(series=AddTicket.ticket_for_change.series)
    else:
        await state.update_data(series=message.text)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç", reply_markup=await reply.product(message.text))
    await state.set_state(AddTicket.product)
    
@user.message(AddTicket.product, F.text)
async def add_ticket_product(message: types.Message, state: FSMContext):
    if message.text == "." and AddTicket.ticket_for_change:
        await state.update_data(product=AddTicket.ticket_for_change.product)
    else:
        await state.update_data(product=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(AddTicket.additionally)
    
@user.message(AddTicket.additionally, F.text)
async def add_ticket_additionally(message: types.Message, state: FSMContext, session: AsyncSession):
    await state.update_data(additionally=message.text)
    btns = ["–ë–µ–∑ —Ñ–æ—Ç–æ", "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç"]
    await message.answer("–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–æ—Ç–æ –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç", reply_markup=reply.get_callback_btns(btns=btns))
    await state.set_state(AddTicket.images)
    
    
@user.message(AddTicket.images)
async def add_ticket_images(message: types.Message, state: FSMContext, session: AsyncSession):
    if message.text == "–ë–µ–∑ —Ñ–æ—Ç–æ":
        await state.update_data(images=None)
        btns = ["–ë–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"]
        await message.answer("–ü—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏", 
        reply_markup=reply.get_callback_btns(btns=btns))
        await state.set_state(AddTicket.documents)
    global list_images
    if message.photo:
        photo = message.photo[-1].file_id
        list_images.append(photo) 
    elif message.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç":          
        await state.update_data(images=', '.join(list_images))
        btns = ["–ë–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏"]
        await message.answer("–ü—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏", 
        reply_markup=reply.get_callback_btns(btns=btns))
        await state.set_state(AddTicket.documents)
 
async def send_ticket_to_group(bot, data):
    ticket = await get_last_ticket()
    region = ticket.region
    if region in group_id:
        value = group_id[region]
        await bot.send_message(chat_id=value, text=f"‚ùó‚ùó‚ùó–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞‚ùó‚ùó‚ùó\n\
–†–µ–≥–∏–æ–Ω: <strong>{ticket.region}</strong>\n\
–ü—Ä–æ–¥—É–∫—Ç: <strong>{ticket.product}</strong>\n\
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <strong>{ticket.category}</strong>\n\
–°–µ—Ä–∏—è: {ticket.series}\n\
–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: <strong>{ticket.additionally}</strong>",
    reply_markup=inline.get_callback_btns(btns={"–ü–æ–¥—Ä–æ–±–Ω–µ–µ" : f"new-ticket_{ticket.id}"}))
        
@user.message(AddTicket.documents)
async def add_ticket_document(message: types.Message, state: FSMContext, session: AsyncSession, bot: Bot):
    if message.text == "–ë–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤":
        await state.update_data(documents=None)
    global list_documents
    if message.document:
        list_documents.append(message.document.file_id)
    elif message.text == "–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏":
        await state.update_data(documents=', '.join(list_documents))
        data = await state.get_data()
        try:
            if AddTicket.ticket_for_change:
                await update_ticket(session, AddTicket.ticket_for_change.id, data)
            else:
                await create_ticket(session, data)
            await send_ticket_to_group(bot, data)
            await message.answer("–£—Å–ø–µ—Ö ‚úÖ", reply_markup=types.ReplyKeyboardRemove())
            await message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\
    –ù–∞—à–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—ã —É–∂–µ –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –æ–∂–∏–¥–∞–π—Ç–µ!", reply_markup=await inline.back_to_menu())
            await state.clear()
        except Exception as e:
            await message.answer("–ù–µ—É–¥–∞—á–∞ ‚ùå", reply_markup=types.ReplyKeyboardRemove())
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=await inline.back_to_menu())
            await state.clear()

#############################################################################################################################


############ –¢–ï–ö–£–©–ò–ï –ó–ê–Ø–í–ö–ò ##############################################################################################
@user.callback_query(F.data==("user_tickets"))
async def user_tickets(callback: types.CallbackQuery, session: AsyncSession):
    await callback.answer()
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏", reply_markup= reply.user_tickets)


@user.message(F.text=="–í—Å–µ –∑–∞—è–≤–∫–∏")
async def all_user_tickets(message: types.Message, session: AsyncSession):
    
    all_tickets = await get_tickets_by_id(message.from_user.id)
    for ticket in all_tickets:
        await message.answer(f"–ó–ê–Ø–í–ö–ê ‚Ññ{ticket.id}\n\n\
–°—Ç–∞—Ç—É—Å: <strong>{ticket.status}</strong>\n\
–†–µ–≥–∏–æ–Ω: <strong>{ticket.region}</strong>\n\
–ü—Ä–æ–¥—É–∫—Ç: <strong>{ticket.product}</strong>\n\
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <strong>{ticket.category}</strong>\n\
–°–µ—Ä–∏—è: {ticket.series}\n\
–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: <strong>{ticket.additionally}</strong>", 
reply_markup=inline.get_callback_btns(
           btns={
               "–ü–æ–∫–∞–∑–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è": f"media-ticket_{ticket.id}",
               "–ò–∑–º–µ–Ω–∏—Ç—å": f"t-change_{ticket.id}",
           },
           sizes=(1,)
       ),)
    
    await message.answer("–í–æ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ ‚è´", reply_markup=await inline.back_to_menu())
    
@user.message(F.text=="–ù–æ–≤—ã–µ –∑–∞—è–≤–∫–∏")
async def all_user_tickets(message: types.Message, session: AsyncSession):
    
    all_tickets = await get_tickets_by_id(message.from_user.id)
    for ticket in all_tickets:
        if ticket.status == "–ù–æ–≤–∞—è":
            await message.answer(f"–ó–ê–Ø–í–ö–ê ‚Ññ{ticket.id}\n\n\
–°—Ç–∞—Ç—É—Å: <strong>{ticket.status}</strong>\n\
–†–µ–≥–∏–æ–Ω: <strong>{ticket.region}</strong>\n\
–ü—Ä–æ–¥—É–∫—Ç: <strong>{ticket.product}</strong>\n\
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <strong>{ticket.category}</strong>\n\
–°–µ—Ä–∏—è: {ticket.series}\n\
–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: <strong>{ticket.additionally}</strong>", 
reply_markup=inline.get_callback_btns(
           btns={
               "–ü–æ–∫–∞–∑–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è": f"media-ticket_{ticket.id}",
               "–ò–∑–º–µ–Ω–∏—Ç—å": f"t-change_{ticket.id}",
           },
           sizes=(1,)
       ),)
    
    await message.answer("–í–æ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ ‚è´", reply_markup=await inline.back_to_menu())
    
@user.message(F.text=="–ó–∞—è–≤–∫–∏ –≤ —Ä–∞–±–æ—Ç–µ")
async def all_user_tickets(message: types.Message, session: AsyncSession):
    
    all_tickets = await get_tickets_by_id(message.from_user.id)
    for ticket in all_tickets:
        if ticket.status == "–í —Ä–∞–±–æ—Ç–µ":
            await message.answer(f"–ó–ê–Ø–í–ö–ê ‚Ññ{ticket.id}\n\n\
–°—Ç–∞—Ç—É—Å: <strong>{ticket.status}</strong>\n\
–†–µ–≥–∏–æ–Ω: <strong>{ticket.region}</strong>\n\
–ü—Ä–æ–¥—É–∫—Ç: <strong>{ticket.product}</strong>\n\
–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <strong>{ticket.category}</strong>\n\
–°–µ—Ä–∏—è: {ticket.series}\n\
–î–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: <strong>{ticket.additionally}</strong>", 
reply_markup=inline.get_callback_btns(
           btns={
               "–ü–æ–∫–∞–∑–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è": f"media-ticket_{ticket.id}",
               "–ò–∑–º–µ–Ω–∏—Ç—å": f"t-change_{ticket.id}",
           },
           sizes=(1,)
       ),)
    
    await message.answer("–í–æ—Ç –≤—Å–µ –∑–∞—è–≤–∫–∏ –æ—Ç –≤–∞—à–µ–≥–æ –∏–º–µ–Ω–∏ ‚è´", reply_markup=await inline.back_to_menu())